// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Carniceria.Models;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace Carniceria.Models
{
    public partial class CarniceriaContext
    {
        private ICarniceriaContextProcedures _procedures;

        public virtual ICarniceriaContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new CarniceriaContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public ICarniceriaContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<sp_obtener_clientesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_obtener_detalle_deudaResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_obtener_deudaResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_obtener_productosResult>().HasNoKey().ToView(null);
        }
    }

    public partial class CarniceriaContextProcedures : ICarniceriaContextProcedures
    {
        private readonly CarniceriaContext _context;

        public CarniceriaContextProcedures(CarniceriaContext context)
        {
            _context = context;
        }

        public virtual async Task<int> sp_insertar_deudaAsync(int? id_cliente, decimal? total, OutputParameter<int?> id_deuda, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterid_deuda = new SqlParameter
            {
                ParameterName = "id_deuda",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = id_deuda?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id_cliente",
                    Value = id_cliente ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "total",
                    Precision = 10,
                    Scale = 2,
                    Value = total ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterid_deuda,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_insertar_deuda] @id_cliente, @total, @id_deuda OUTPUT", sqlParameters, cancellationToken);

            id_deuda.SetValue(parameterid_deuda.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_insertar_deuda_detalleAsync(int? id_deuda, int? id_producto, decimal? kilos, int? cantidad, decimal? monto_producto, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id_deuda",
                    Value = id_deuda ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "id_producto",
                    Value = id_producto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "kilos",
                    Precision = 10,
                    Scale = 2,
                    Value = kilos ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "cantidad",
                    Value = cantidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "monto_producto",
                    Precision = 10,
                    Scale = 2,
                    Value = monto_producto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_insertar_deuda_detalle] @id_deuda, @id_producto, @kilos, @cantidad, @monto_producto", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_insertar_pagoAsync(int? id_deuda, decimal? monto_pagado, OutputParameter<int?> resultado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterresultado = new SqlParameter
            {
                ParameterName = "resultado",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = resultado?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id_deuda",
                    Value = id_deuda ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "monto_pagado",
                    Precision = 10,
                    Scale = 2,
                    Value = monto_pagado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterresultado,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_insertar_pago] @id_deuda, @monto_pagado, @resultado OUTPUT", sqlParameters, cancellationToken);

            resultado.SetValue(parameterresultado.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_obtener_clientesResult>> sp_obtener_clientesAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_obtener_clientesResult>("EXEC @returnValue = [dbo].[sp_obtener_clientes]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_obtener_detalle_deudaResult>> sp_obtener_detalle_deudaAsync(int? id_deuda, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id_deuda",
                    Value = id_deuda ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_obtener_detalle_deudaResult>("EXEC @returnValue = [dbo].[sp_obtener_detalle_deuda] @id_deuda", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_obtener_deudaResult>> sp_obtener_deudaAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_obtener_deudaResult>("EXEC @returnValue = [dbo].[sp_obtener_deuda]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_obtener_productosResult>> sp_obtener_productosAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_obtener_productosResult>("EXEC @returnValue = [dbo].[sp_obtener_productos]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
