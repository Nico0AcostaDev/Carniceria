CREATE TABLE roles (
    id_rol INT IDENTITY(1,1) PRIMARY KEY,
    nombre_rol VARCHAR(50) NOT NULL
);

CREATE TABLE usuarios (
    id_usuario INT IDENTITY(1,1) PRIMARY KEY,
    nombre_usuario VARCHAR(100) NOT NULL,
    email VARCHAR(100),
	id_rol INT NOT NULL,
    contrasena VARCHAR(255) NOT NULL,
    fecha_registro DATETIME NOT NULL,
	cod_estado varchar(1)
);

CREATE TABLE productos (
    id_producto INT IDENTITY(1,1) PRIMARY KEY,
    nombre_producto VARCHAR(255) NOT NULL,
    precio DECIMAL(10, 2),
	tipo VARCHAR(1) NOT NULL,
	cod_estado varchar(1)
); 

CREATE TABLE clientes ( 
    id_cliente INT IDENTITY(1,1) PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    apellido VARCHAR(100) NOT NULL,
    telefono VARCHAR(20),
    direccion VARCHAR(255),
    email VARCHAR(50),
    info_relevante VARCHAR(255),
    fecha_registro DATETIME,
	cod_estado varchar(1)
);
   
CREATE TABLE detalle_deuda_productos (
    id_deuda_producto  INT IDENTITY(1,1) PRIMARY KEY,
    id_deuda INT NOT NULL,
    id_producto INT NOT NULL,
	kilos DECIMAL(10, 2),
    cantidad INT,
    monto_producto DECIMAL(10, 2) NOT NULL
); 
 
CREATE TABLE deudas_registradas (
    id_deuda INT IDENTITY(1,1) PRIMARY KEY,
    id_cliente INT NOT NULL, 
    fecha_deuda DATETIME NOT NULL,
	total DECIMAL(10, 2) NOT NULL,
	saldada BIT
);

CREATE TABLE pagos (
	id_parciales INT IDENTITY(1,1) PRIMARY KEY,
	id_deuda INT NOT NULL,
	monto_pagado DECIMAL(10, 2) NOT NULL, 
	fecha_pago DATETIME NOT NULL,
);
 
--tipo "C" carne, "p" productos

 
ALTER TABLE usuarios
ADD CONSTRAINT usuarios_roles
FOREIGN KEY (id_rol) REFERENCES roles(id_rol);

ALTER TABLE deudas_registradas
ADD CONSTRAINT deudas_registradas_clientes
FOREIGN KEY (id_cliente) REFERENCES clientes(id_cliente);

ALTER TABLE detalle_deuda_productos
ADD CONSTRAINT detalle_deuda_producto_deudas_registradas
FOREIGN KEY (id_deuda) REFERENCES deudas_registradas(id_deuda);

ALTER TABLE detalle_deuda_productos
ADD CONSTRAINT detalle_deuda_producto_productos
FOREIGN KEY (id_producto) REFERENCES productos(id_producto);

ALTER TABLE pagos
ADD CONSTRAINT pagos_deudas_registradas
FOREIGN KEY (id_deuda) REFERENCES deudas_registradas(id_deuda); 

INSERT INTO productos (nombre_producto, precio, tipo,cod_estado)
VALUES
('Bife de chorizo', 5500.00, 'C','A'),   
('Asado de tira', 6400.00, 'C','A'),
('Lavandina', 1080.00, 'P','A'),        
('Detergente', 1050.00, 'P','A'),
('Jabón en polvo', 1120.00, 'P','A');

INSERT INTO clientes (nombre, apellido, telefono, direccion, email, info_relevante, fecha_registro,cod_estado)
VALUES 
('Juan', 'Pérez', '123456789', 'Calle Falsa 123', 'juan.perez@example.com', 'Cliente preferencial', GETDATE(),'A'),
('María', 'González', '987654321', 'Avenida Siempre Viva 456', 'maria.gonzalez@example.com', 'Cliente nuevo', GETDATE(),'A'),
('Carlos', 'López', '555555555', 'Boulevard de los Sueños 789', 'carlos.lopez@example.com', 'Cliente frecuente', GETDATE(),'A');

CREATE PROCEDURE sp_obtener_clientes
AS
BEGIN
    SELECT 
        id_cliente,
        nombre,
        apellido,
        telefono,
        direccion,
        email,
        info_relevante,
        fecha_registro,
		cod_estado
    FROM 
        clientes
	WHERE 
		cod_estado = 'A'
		
END

CREATE PROCEDURE sp_obtener_productos
AS
BEGIN
    SELECT 
        id_producto,
        nombre_producto,
        precio,
        tipo
    FROM 
        productos
	WHERE 
		cod_estado = 'A'
END


  CREATE PROCEDURE sp_insertar_deuda
    @id_cliente INT,
    @id_empleado INT,
    @total DECIMAL(10, 2),
    @id_deuda INT OUTPUT
AS
BEGIN
        -- Insertar en la tabla ventas
        INSERT INTO deudas_registradas(id_cliente, fecha_deuda, total,saldada)
        VALUES (@id_cliente, GETDATE(), @total,0);

        -- Obtener el id_venta generado
        SET @id_deuda = SCOPE_IDENTITY();
   
END; 

  CREATE PROCEDURE sp_insertar_deuda_detalle
    @id_deuda INT,
    @id_producto INT,
    @total DECIMAL(10, 2)
AS
BEGIN
        -- Insertar en la tabla ventas
        INSERT INTO detalle_deuda_productos(id_deuda,id_producto,kilos,cantidad,monto_producto)
        VALUES (@id_deuda,@id_producto,); 
END; 
